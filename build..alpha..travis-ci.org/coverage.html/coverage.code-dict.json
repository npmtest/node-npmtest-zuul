{"/home/travis/build/npmtest/node-npmtest-zuul/test.js":"/* istanbul instrument in package npmtest_zuul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zuul/lib.npmtest_zuul.js":"/* istanbul instrument in package npmtest_zuul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_zuul = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_zuul = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-zuul/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-zuul && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_zuul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_zuul\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_zuul.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_zuul.rollup.js'] =\n            local.assetsDict['/assets.npmtest_zuul.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_zuul.__dirname + '/lib.npmtest_zuul.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/zuul.js":"var debug = require('debug')('zuul');\nvar omit = require('lodash').omit;\nvar open = require('opener');\nvar Batch = require('batch');\nvar EventEmitter = require('events').EventEmitter;\n\nvar control_app = require('./control-app');\nvar frameworks = require('../frameworks');\nvar setup_test_instance = require('./setup');\nvar SauceBrowser = require('./SauceBrowser');\nvar PhantomBrowser = require('./PhantomBrowser');\nvar Electron = require('./Electron');\n\nmodule.exports = Zuul;\n\nfunction Zuul(config) {\n    if (!(this instanceof Zuul)) {\n        return new Zuul(config);\n    }\n\n    if (config.browser_retries === undefined) {\n        config.browser_retries = 6;\n    }\n\n    if (config.browser_output_timeout === undefined) {\n        config.browser_output_timeout = -1;\n    }\n\n   if (config.browser_open_timeout === undefined) {\n       config.browser_open_timeout = 120 * 1000;\n   }\n\n    var self = this;\n\n    var ui = config.ui;\n    var framework_dir = frameworks[ui];\n    if (!framework_dir) {\n        throw new Error('unsupported ui: ' + ui);\n    }\n\n    config.framework_dir = framework_dir;\n    self._config = config;\n\n    debug('config: %j', omit(config, ['sauce_username', 'sauce_key', 'username', 'key']));\n\n    // list of browsers to test\n    self._browsers = [];\n\n    self._concurrency = config.concurrency || 5;\n}\n\nZuul.prototype.__proto__ = EventEmitter.prototype;\n\nZuul.prototype._setup = function(cb) {\n    var self = this;\n\n    var config = self._config;\n\n    // we only need one control app\n    var control_server = control_app(config).listen(0, function() {\n        debug('control server active on port %d', control_server.address().port);\n        cb(null, control_server.address().port);\n    });\n};\n\nZuul.prototype.browser = function(info) {\n    var self = this;\n    var config = self._config;\n\n    self._browsers.push(SauceBrowser({\n        name: config.name,\n        build: process.env.TRAVIS_BUILD_NUMBER,\n        firefox_profile: info.firefox_profile,\n        username: config.username,\n        key: config.key,\n        browser: info.name,\n        version: info.version,\n        platform: info.platform,\n        capabilities: config.capabilities\n    }, config));\n};\n\nZuul.prototype.run = function(done) {\n    var self = this;\n\n    var config = self._config;\n\n    self._setup(function(err, control_port) {\n        config.control_port = control_port;\n\n        if (config.local) {\n            setup_test_instance(config, function(err, url) {\n                if (err) {\n                    console.error(err.stack);\n                    process.exit(1);\n                    return;\n                }\n\n                if (config.open) {\n                    open(url);\n                }\n                else {\n                    console.log('open the following url in a browser:');\n                    console.log(url);\n                }\n            });\n            return;\n        }\n\n        // TODO love and care\n        if (config.phantom) {\n            var phantom = PhantomBrowser(config);\n            self.emit('browser', phantom);\n            phantom.once('done', function(results) {\n                done(results.failed === 0 && results.passed > 0);\n            });\n            return phantom.start();\n        }\n\n        if (config.electron) {\n            var electron = Electron(config);\n            self.emit('browser', electron);\n            electron.once('done', function(results) {\n                done(results.failed === 0 && results.passed > 0);\n            });\n            return electron.start();\n        }\n\n        var batch = new Batch();\n        batch.concurrency(self._concurrency);\n\n        var passed = true;\n\n        self._browsers.forEach(function(browser) {\n            self.emit('browser', browser);\n\n            var retries = config.browser_retries;\n\n            browser.on('error', function(err) {\n                if (--retries >= 0) {\n                    debug('browser error (%s), restarting', err.message)\n                    self.emit('restart', browser);\n                    return browser.start();\n                }\n\n                self.emit('error', err);\n            });\n\n            batch.push(function(done) {\n                browser.once('done', function(results) {\n                    // if no tests passed, then this is also a problem\n                    // indicates potential error to even run tests\n                    if (results.failed || results.passed === 0) {\n                        passed = false;\n                    }\n                    done();\n                });\n                browser.start();\n            });\n        });\n\n        batch.end(function(err) {\n            debug('batch done');\n            done(err || passed);\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/control-app.js":"var path = require('path');\nvar fs = require('fs');\nvar deglob = require('globs-to-files');\n\nvar compression = require('compression');\nvar express = require('express');\nvar expstate = require('express-state');\nvar browserify = require('browserify');\nvar im = require('istanbul-middleware');\nvar watchify = require('watchify');\nvar assign = require('lodash').assign;\nvar humanizeDuration = require('humanize-duration');\nvar debug = require('debug')('zuul:control-app');\n\nvar defaultBuilder = '../lib/builder-browserify';\n\nmodule.exports = function(config) {\n    var files = config.files;\n    var ui = config.ui;\n    var framework_dir = config.framework_dir;\n    var prj_dir = config.prj_dir;\n\n    var opt = {\n        debug: true\n    };\n\n    // watchify options\n    // https://github.com/substack/watchify#var-w--watchifyb-opts\n    opt = assign(opt, {\n        cache: {},\n        packageCache: {},\n        fullPaths: true\n    });\n\n    files = deglob.sync(files, {cwd: prj_dir});\n\n    var user_html = '';\n    if (config.html) {\n        user_html = fs.readFileSync(path.join(prj_dir, config.html), 'utf-8');\n    }\n\n    var build;\n    // default builder is browserify which we provide\n    config.builder = config.builder || defaultBuilder;\n\n    build = require(config.builder)(files, config);\n\n    var app = express();\n    app.use(compression());\n\n    expstate.extend(app);\n\n    app.set('state namespace', 'zuul');\n    app.expose(ui, 'ui');\n    app.expose(config.name, 'title');\n\n    app.set('views', __dirname + '/../frameworks');\n    app.set('view engine', 'html');\n    app.engine('html', require('hbs').__express);\n\n    app.use(function(req, res, next) {\n        res.locals.title = config.name;\n        res.locals.user_scripts = config.scripts || [];\n        res.locals.user_html = user_html;\n        next();\n    });\n\n    app.use(app.router);\n\n    var bundle_router = new express.Router();\n\n    app.use(bundle_router.middleware);\n\n    // zuul files\n    app.use('/__zuul', express.static(__dirname + '/../frameworks'));\n    // framework files\n    app.use('/__zuul', express.static(framework_dir));\n\n    // any user's files\n    app.use(express.static(process.cwd()));\n\n    if (config.coverage && config.local) {\n        // coverage endpoint\n        app.use('/__zuul/coverage', im.createHandler());\n    }\n\n    app.get('/__zuul', function(req, res) {\n        res.locals.config = { port: config.support_port };\n        res.render('index');\n    });\n\n    var map = undefined;\n\n    var clientBundler = browserify(opt);\n    clientBundler.require(path.join(framework_dir, '/client.js'), { entry: true });\n\n    // we use watchify to speed up `.bundle()` calls\n    clientBundler = watchify(clientBundler);\n\n    bundle_router.get('/__zuul/client.js', function(req, res, next) {\n        res.contentType('application/javascript');\n\n        var start = Date.now();\n        clientBundler.bundle(function(err, buf) {\n            if (err) {\n                return next(err);\n            }\n\n            debug('zuul client took %s to bundle', humanizeDuration(Date.now() - start));\n\n            res.send(buf.toString());\n        });\n    });\n\n    bundle_router.get('/__zuul/test-bundle.map.json', function(req, res, next) {\n        if (!map) {\n            return res.status(404).send('');\n        }\n\n        res.json(map);\n    });\n\n    bundle_router.get('/__zuul/test-bundle.js', function(req, res, next) {\n        res.contentType('application/javascript');\n\n        build(function(err, src, srcmap) {\n            if (err) {\n                return next(err);\n            }\n\n            if (srcmap) {\n                map = srcmap;\n                map.file = '/__zuul/test-bundle.js';\n                src += '//# sourceMappingURL=' + '/__zuul/test-bundle.map.json';\n            }\n\n            res.send(src);\n        });\n    });\n\n    return app;\n};\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/frameworks/index.js":"module.exports.qunit = __dirname + '/qunit';\nmodule.exports.tape = __dirname + '/tape';\nmodule.exports.jasmine = __dirname + '/jasmine';\nmodule.exports.jasmine2 = __dirname + '/jasmine2';\nmodule.exports['mocha-bdd'] = __dirname + '/mocha';\nmodule.exports['mocha-tdd'] = __dirname + '/mocha';\nmodule.exports['mocha-qunit'] = __dirname + '/mocha';\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/setup.js":"var http = require('http');\nvar httpProxy = require('http-proxy');\nvar debug = require('debug')('zuul:setup');\n\nvar user_server = require('./user-server');\n\n// sets up a test instance\n// cb(err, instance)\n// instance.shutdown() terminates the instance\nfunction setup_test_instance(opt, cb) {\n\n    var support_server = undefined;\n    var bouncer = undefined;\n    var Tunnel;\n    if (typeof opt.tunnel === 'string') {\n        Tunnel = require('zuul-' + opt.tunnel);\n        debug('using zuul-%s to tunnel', opt.tunnel);\n    } else if (typeof opt.tunnel === 'object' && opt.tunnel.type) {\n        Tunnel = require('zuul-' + opt.tunnel.type);\n        debug('using zuul-%s to tunnel', opt.tunnel.type);\n    } else {\n        Tunnel = require('zuul-localtunnel');\n        debug('using zuul-localhost to tunnel');\n    }\n\n    var tunnel = new Tunnel(opt);\n\n    if (opt.server) {\n        user_server(opt.server, setup);\n    }\n    else {\n        setup();\n    }\n\n    function setup(_support_server) {\n        support_server = _support_server;\n        var config = opt;\n        var control_port = opt.control_port;\n\n        var support_port = undefined;\n        if (support_server) {\n            support_port = config.support_port = support_server.port;\n        }\n\n        // TODO start support server\n        // currently happens within user_server\n\n        var bouncer_port = 0;\n        if (config.local && parseInt(config.local)) {\n            bouncer_port = config.local;\n        }\n\n        if (config.phantom && parseInt(config.phantom)) {\n            bouncer_port = config.phantom;\n        }\n\n        var proxy = httpProxy.createProxy();\n        proxy.on('proxyReq', on_proxy_req);\n\n        bouncer = http.createServer();\n        bouncer.on('request', on_request(proxy.web));\n        bouncer.on('upgrade', on_request(proxy.ws));\n\n        function on_request(bounce) {\n            return function(req, res) {\n                var args = [].slice.call(arguments);\n                if (is_control_req(req)) {\n                    args.push({ target: 'http://localhost:' + control_port });\n                    bounce.apply(proxy, args);\n                    return;\n                }\n\n                args.push({ target: 'http://localhost:' + support_port }, on_support_server_proxy_done);\n                bounce.apply(proxy, args);\n            };\n        }\n\n        function on_proxy_req(proxyReq, req, res, options) {\n            if (is_control_req(req) ||\n                (req.headers.connection && req.headers.connection.toLowerCase().indexOf('upgrade') === -1)) {\n                proxyReq.setHeader('connection', 'close');\n            }\n        }\n\n        function on_support_server_proxy_done(err, req, res) {\n            if (err.code === 'ECONNRESET' && res && res.socket && res.socket.destroyed === true) {\n                debug('Request to support-server:%s was canceled by the client, ignoring the proxy error');\n            }\n        }\n\n        function is_control_req(req) {\n            var url = req.url.split('?')[0];\n            return !support_port || url.split('/')[1] === '__zuul';\n        }\n\n        bouncer.listen(bouncer_port, bouncer_active);\n\n        function bouncer_active() {\n            var app_port = bouncer.address().port;\n            debug('bouncer active on port %d', app_port);\n\n            if (!config.tunnel) {\n                return cb(null, 'http://localhost:' + app_port + '/__zuul');\n            }\n\n            tunnel.connect(app_port, cb);\n        };\n    }\n\n    function shutdown() {\n        bouncer.close();\n        tunnel.close();\n\n        if (support_server) {\n            support_server.process.kill('SIGKILL');\n        }\n    }\n\n    return {\n        shutdown: shutdown\n    };\n}\n\nmodule.exports = setup_test_instance;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/user-server.js":"var spawn = require('child_process').spawn;\n\nvar http = require('http');\nvar copy = require('shallow-copy');\nvar parse_cmd = require('shell-quote').parse;\nvar debug = require('debug')('zuul:user-server');\n\nmodule.exports = function(server, callback) {\n    debug('user server: %s', server);\n\n    var cmd;\n    var cwd;\n    var wait = 0;\n    if (server !== null && server.cmd) {\n        // expect the following format in .zuul.yml\n        // server:\n        //   cmd: ./test/support/server.js\n        //   cwd: ./anotherapp\n        cmd = server.cmd;\n        cwd = server.cwd;\n        wait = server.wait;\n    }\n    else {\n        // expect the following format in .zuul.yml\n        // server: ./test/support/server.js\n        cmd = server;\n    }\n\n    if (!cwd) {\n        // TODO(shtylman) is this right?\n        cwd = process.cwd();\n    }\n\n    var env = copy(process.env);\n\n    get_open_port(function(port) {\n        if (!Array.isArray(cmd)) {\n            cmd = parse_cmd(cmd, { ZUUL_PORT: port });\n        }\n\n        if (/\\.js$/.test(cmd[0])) {\n            cmd.unshift(process.execPath);\n        }\n\n        env.ZUUL_PORT = port;\n\n        debug('user server port %d', port);\n\n        var ps = spawn(cmd[0], cmd.slice(1), { cwd: cwd, env: env });\n        ps.stdout.pipe(process.stdout);\n        ps.stderr.pipe(process.stderr);\n\n        function exit() {\n            ps.kill('SIGTERM');\n        }\n\n        ps.once('exit', function (code) {\n            debug('user server exited with status: %d', code);\n            process.removeListener('exit', exit);\n        });\n\n        process.on('exit', exit);\n\n        return setTimeout(function(){\n            callback({ port: port, process: ps });\n        }, wait);\n    });\n};\n\nfunction get_open_port(callback) {\n    var server  = http.createServer();\n    server.listen(0);\n    server.on('listening', function() {\n        var port = server.address().port;\n        server.close(function() {\n            callback(port);\n        });\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/SauceBrowser.js":"var wd = require('wd');\nvar EventEmitter = require('events').EventEmitter;\nvar FirefoxProfile = require('firefox-profile');\nvar debug = require('debug');\nvar omit = require('lodash').omit;\nvar xtend = require('xtend');\nvar _ = require('lodash');\n\n\nvar setup_test_instance = require('./setup');\n\nfunction SauceBrowser(conf, opt) {\n    if (!(this instanceof SauceBrowser)) {\n        return new SauceBrowser(conf, opt);\n    }\n\n    var self = this;\n    self._conf = conf;\n    self._opt = opt;\n    self._opt.tunnel = (opt.sauce_connect) ? false : (self._opt.tunnel || true);\n    self.stats = {\n        passed: 0,\n        failed: 0\n    };\n    self.debug = debug('zuul:sauce:' + conf.browser + ':' + conf.version);\n    self.debug('browser conf: %j', omit(conf, ['username', 'key']));\n}\n\nSauceBrowser.prototype.__proto__ = EventEmitter.prototype;\n\nSauceBrowser.prototype.toString = function() {\n    var self = this;\n    var conf = self._conf;\n    return '<' + conf.browser + ' ' + conf.version + ' on ' + conf.platform + '>';\n};\n\nSauceBrowser.prototype.start = function() {\n    var self = this;\n    var conf = self._conf;\n\n    self.stopped = false;\n    self.stats = {\n        passed: 0,\n        failed: 0\n    };\n\n    self.debug('running');\n    var browser = self.browser = wd.remote('ondemand.saucelabs.com', 80, conf.username, conf.key);\n\n    self.controller = setup_test_instance(self._opt, function(err, url) {\n        if (err) {\n            return self.shutdown(err);\n        }\n\n        self.emit('init', conf);\n\n        var init_conf = xtend({\n            build: conf.build,\n            name: conf.name,\n            tags: conf.tags || [],\n            browserName: conf.browser,\n            version: conf.version,\n            platform: conf.platform\n        }, conf.capabilities);\n\n        // use the SAUCE_APPIUM_VERSION environment variable to specify the\n        // Appium version. If not specified the test will run against the\n        // default Appium version\n        if (process.env.SAUCE_APPIUM_VERSION) {\n            init_conf['appium-version'] = process.env.SAUCE_APPIUM_VERSION;\n        }\n\n        // configures sauce connect with a tunnel identifier\n        // if sauce_connect is true, use the TRAVIS_JOB_NUMBER environment variable\n        // otherwise use the contents of the sauce_connect variable\n        if (self._opt.sauce_connect) {\n            var tunnelId = self._opt.sauce_connect !== true ? self._opt.sauce_connect : process.env.TRAVIS_JOB_NUMBER;\n            if (tunnelId) {\n                init_conf['tunnel-identifier'] = tunnelId;\n            }\n        }\n\n        if (conf.firefox_profile) {\n            var fp = new FirefoxProfile();\n            var extensions = conf.firefox_profile.extensions;\n            for (var preference in conf.firefox_profile) {\n                if (preference !== 'extensions') {\n                    fp.setPreference(preference, conf.firefox_profile[preference]);\n                }\n            }\n            extensions = extensions ? extensions : [];\n            fp.addExtensions(extensions, function () {\n                fp.encoded(function(zippedProfile) {\n                    init_conf.firefox_profile = zippedProfile;\n                    init();\n                });\n            });\n        } else {\n            init();\n        }\n\n        function init() {\n            self.debug('queuing');\n\n            browser.init(init_conf, function(err) {\n                if (err) {\n                    if (err.data) {\n                        err.message += ': ' + err.data.split('\\n').slice(0, 1);\n                    }\n                    return self.shutdown(err);\n                }\n\n                var reporter = new EventEmitter();\n\n                reporter.on('test_end', function(test) {\n                    if (!test.passed) {\n                        return self.stats.failed++;\n                    }\n                    self.stats.passed++;\n                });\n\n                reporter.on('done', function(results) {\n                    clearTimeout(self.noOutputTimeout);\n                    self.debug('done');\n                    var passed = results.passed;\n                    var called = false;\n                    browser.sauceJobStatus(passed, function(err) {\n                        if (called) {\n                            return;\n                        }\n\n                        called = true;\n                        self.shutdown();\n\n                        if (err) {\n                            return;\n                            // don't let this error fail us\n                        }\n                    });\n\n                    reporter.removeAllListeners();\n                });\n\n                self.debug('open %s', url);\n                self.emit('start', reporter);\n\n                var timeout = false;\n                var get_timeout = setTimeout(function() {\n                    self.debug('timed out waiting for open %s', url);\n                    timeout = true;\n                    self.shutdown(new Error('Timeout opening url after ' + Math.round(self._opt.browser_open_timeout/1000) + 's'));\n                }, self._opt.browser_open_timeout);\n\n                browser.get(url, function(err) {\n                    self.debug('browser opened url');\n\n                    if (timeout) {\n                        return;\n                    }\n\n                    clearTimeout(get_timeout);\n                    if (err) {\n                        return self.shutdown(err);\n                    }\n\n                    // no new output for 30s => error\n                    watchOutput();\n\n                    function watchOutput() {\n                        if (self._opt.browser_output_timeout === -1) {\n                            return;\n                        }\n\n                        clearTimeout(self.noOutputTimeout);\n\n                        self.noOutputTimeout = setTimeout(function() {\n                            self.shutdown(new Error('Did not receive any new output from browser for ' + Math.round(self._opt.browser_output_timeout/1000) + 's, shutting down'));\n                        }, self._opt.browser_output_timeout);\n                    }\n\n                    (function wait() {\n                        if (self.stopped) {\n                            return;\n                        }\n\n                        self.debug('waiting for test results from %s', url);\n                        // take the last 1000 log lines\n                        // careful, the less you log lines, the slower your test\n                        // result will be. The test could be finished in the browser\n                        // but not in your console since it can take a lot\n                        // of time to get a lot of results\n                        var js = '(window.zuul_msg_bus ? window.zuul_msg_bus.splice(0, 1000) : []);'\n                        browser.eval(js, function(err, res) {\n                            if (err) {\n                                self.debug('err: %s', err.message);\n                                return self.shutdown(err);\n                            }\n\n                            res = res || [];\n                            //When testing with microsoft edge:\n                            //Adds length property to array-like object if not defined to execute filter properly\n                            if (res.length === undefined) {\n                                res.length = Object.keys(res).length;\n                            }\n                            self.debug('res.length: %s', res.length);\n\n                            // if we received some data, reset the no output watch timeout\n                            if (res.length > 0) {\n                                watchOutput();\n                            }\n\n                            var has_done = false;\n                            Array.prototype.filter.call(res, Boolean).forEach(function(msg) {\n                                if (msg.type === 'done') {\n                                    has_done = true;\n                                }\n\n                                reporter.emit(msg.type, msg);\n                            });\n\n                            if (has_done) {\n                                self.debug('finished tests for %s', url);\n                                return;\n                            }\n\n                            self.debug('fetching more results');\n\n                            // if we found results, let's not wait\n                            // to get more\n                            if (res.length > 0) {\n                                process.nextTick(wait);\n                            } else {\n                                // otherwise, let's wait a little so that we do not\n                                // spam saucelabs\n                                setTimeout(wait, 2000);\n                            }\n                        });\n                    })();\n                });\n            });\n        }\n    });\n};\n\nSauceBrowser.prototype.shutdown = function(err) {\n    var self = this;\n\n    clearTimeout(self.noOutputTimeout);\n\n    self.stopped = true;\n\n    var finish_shutdown = function () {\n        self.debug('shutdown');\n\n        if (self.controller) {\n            self.controller.shutdown();\n        }\n\n        if (err) {\n            // prefix browser err message with browser version\n            err.message = self._conf.browser + '@' + self._conf.version + ': ' + err.message;\n            self.emit('error', err);\n            return;\n        }\n\n        self.emit('done', self.stats);\n        self.removeAllListeners();\n    }\n\n    // make sure the browser shuts down before continuing\n    if (self.browser) {\n        self.debug('quitting browser');\n\n        var timeout = false;\n        var quit_timeout = setTimeout(function() {\n            self.debug('timed out waiting for browser to quit');\n            timeout = true;\n            finish_shutdown();\n        }, 10 * 1000);\n\n        self.browser.quit(function(err) {\n            if (timeout) {\n                return;\n            }\n\n            clearTimeout(quit_timeout);\n            finish_shutdown();\n        });\n    }\n    else {\n        finish_shutdown();\n    }\n};\n\nmodule.exports = SauceBrowser;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/PhantomBrowser.js":"var spawn = require('child_process').spawn;\nvar path = require('path');\nvar EventEmitter = require('events').EventEmitter;\nvar Split = require('char-split');\nvar debug = require('debug')('zuul:phantombrowser');\n\nvar setup_test_instance = require('./setup');\nrequire('colors');\n\nfunction getPhantom() {\n    try {\n        return require('phantomjs-prebuilt');\n    } catch (e1) {\n        try {\n            // fall back to older package\n            return require('phantomjs');\n        } catch (e2) {\n            // warn users to install phantomjs-prebuilt if they have neither installed\n            throw e1;\n        }\n    }\n}\n\nfunction PhantomBrowser(opt) {\n    if (!(this instanceof PhantomBrowser)) {\n        return new PhantomBrowser(opt);\n    }\n\n    var self = this;\n    self._opt = opt;\n    self.status = {\n        passed: 0,\n        failed: 0\n    };\n}\n\nPhantomBrowser.prototype.__proto__ = EventEmitter.prototype;\n\nPhantomBrowser.prototype.start = function() {\n    var self = this;\n\n    var phantomjs = getPhantom();\n    \n    var binpath = phantomjs.path;\n\n    self.controller = setup_test_instance(self._opt, function(err, url) {\n        if (err) {\n            self.emit('error', err);\n            self.emit('done', {\n                passed: false\n            });\n        }\n\n        debug('url %s', url);\n\n        var reporter = new EventEmitter();\n\n        reporter.on('console', function(msg) {\n            console.log.apply(console, msg.args);\n        });\n\n        reporter.on('test', function(test) {\n            console.log('starting', test.name.white);\n        });\n\n        reporter.on('test_end', function(test) {\n            if (!test.passed) {\n                console.log('failed', test.name.red);\n                return self.status.failed++;\n            }\n\n            console.log('passed:', test.name.green);\n            self.status.passed++;\n        });\n\n        reporter.on('assertion', function(assertion) {\n            console.log('Error: %s'.red, assertion.message);\n            assertion.frames.forEach(function(frame) {\n                console.log('    %s %s:%d'.grey, frame.func, frame.filename, frame.line);\n            });\n            console.log();\n        });\n\n        reporter.on('done', function() {\n            reporter.removeAllListeners();\n        });\n\n        self.emit('init', url);\n        self.emit('start', reporter);\n\n        var debugArgs = [\n            self._opt.phantomRemoteDebuggerPort ? '--remote-debugger-port=' + self._opt.phantomRemoteDebuggerPort : '',\n            self._opt.phantomRemoteDebuggerAutorun ? '--remote-debugger-autorun=true' : ''\n        ].filter(Boolean);\n\n        var args = debugArgs.concat([path.join(__dirname, 'phantom-run.js'), url]);\n        var cp = spawn(binpath, args);\n\n        var split = Split();\n        split.on('data', function(line) {\n            var msg;\n            try {\n                msg = JSON.parse(line);\n            } catch (err) {\n                self.emit('error', new Error('failed to parse json: ' + line));\n                return;\n            }\n\n            debug('msg: %j', msg);\n\n            if (msg.type === 'exception') {\n                self.emit('error', new Error(msg.message));\n            } else {\n                reporter.emit(msg.type, msg);\n            }\n        });\n\n        cp.stdout.setEncoding('utf8');\n        cp.stdout.pipe(split);\n\n        cp.stderr.on('data', function (data) {\n            console.error('phantom stderr: '.red + data);\n        });\n\n        cp.on('close', function (code) {\n            self.emit('done', {\n                passed: self.status.passed,\n                failed: self.status.failed\n            });\n        });\n    });\n};\n\nPhantomBrowser.prototype.shutdown = function() {\n    if (self.controller) {\n        self.controller.shutdown();\n    }\n};\n\nmodule.exports = PhantomBrowser;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/Electron.js":"var spawn = require('child_process').spawn;\nvar path = require('path');\nvar EventEmitter = require('events').EventEmitter;\nvar Split = require('char-split');\nvar debug = require('debug')('zuul:electron');\n\nvar setup_test_instance = require('./setup');\nrequire('colors');\n\nfunction Electron(opt) {\n    if (!(this instanceof Electron)) {\n        return new Electron(opt);\n    }\n\n    var self = this;\n    self._opt = opt;\n    self.status = {\n        passed: 0,\n        failed: 0\n    };\n}\n\nElectron.prototype.__proto__ = EventEmitter.prototype;\n\nElectron.prototype.start = function() {\n    var self = this;\n\n    var binpath;\n    try {\n        binpath = require('electron-prebuilt');\n    } catch (err) {\n        binpath = require('electron');\n    }\n\n    self.controller = setup_test_instance(self._opt, function(err, url) {\n        if (err) {\n            self.emit('error', err);\n            self.emit('done', {\n                passed: false\n            });\n        }\n\n        debug('url %s', url);\n\n        var reporter = new EventEmitter();\n\n        reporter.on('console', function(msg) {\n            console.log.apply(console, msg.args);\n        });\n\n        reporter.on('test', function(test) {\n            console.log('starting', test.name.white);\n        });\n\n        reporter.on('test_end', function(test) {\n            if (!test.passed) {\n                console.log('failed', test.name.red);\n                return self.status.failed++;\n            }\n\n            console.log('passed:', test.name.green);\n            self.status.passed++;\n        });\n\n        reporter.on('assertion', function(assertion) {\n            console.log('Error: %s'.red, assertion.message);\n            assertion.frames.forEach(function(frame) {\n                console.log('    %s %s:%d'.grey, frame.func, frame.filename, frame.line);\n            });\n            console.log();\n        });\n\n        reporter.on('done', function() {\n            reporter.removeAllListeners();\n        });\n\n        self.emit('init', url);\n        self.emit('start', reporter);\n\n        var args = [path.join(__dirname, 'electron-run.js'), url];\n\n        var cp = spawn(binpath, args);\n\n        var errors = [];\n\n        var split = Split();\n        split.on('data', function(line) {\n            var msg;\n            try {\n                msg = JSON.parse(line);\n            } catch (err) {\n                self.emit('error', new Error('failed to parse json: ' + line));\n                return;\n            }\n\n            debug('msg: %j', msg);\n            reporter.emit(msg.type, msg);\n        });\n\n        cp.stdout.setEncoding('utf8');\n        cp.stdout.pipe(split);\n\n        cp.stderr.on('data', function (data) {\n            if (/INFO:CONSOLE/.test(data)) return;\n            debug('electron stderr: '.red + '%s', data);\n        });\n\n        cp.on('close', function (code) {\n            self.emit('done', {\n                passed: self.status.passed,\n                failed: self.status.failed\n            });\n        });\n    });\n};\n\nElectron.prototype.shutdown = function() {\n    if (self.controller) {\n        self.controller.shutdown();\n    }\n};\n\nmodule.exports = Electron;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/frameworks/hl.js":"var hljs = new function() {\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/gm, '&amp;').replace(/</gm, '&lt;').replace(/>/gm, '&gt;');\n  }\n\n  function findCode(pre) {\n    for (var node = pre.firstChild; node; node = node.nextSibling) {\n      if (node.nodeName.toUpperCase () == 'CODE')\n        return node;\n      if (!(node.nodeType == 3 && node.nodeValue.match(/\\s+/)))\n        break;\n    }\n  }\n\n  function blockText(block, ignoreNewLines) {\n    return Array.prototype.map.call(block.childNodes, function(node) {\n      if (node.nodeType == 3) {\n        return ignoreNewLines ? node.nodeValue.replace(/\\n/g, '') : node.nodeValue;\n      }\n      if (node.nodeName.toUpperCase () == 'BR') {\n        return '\\n';\n      }\n      return blockText(node, ignoreNewLines);\n    }).join('');\n  }\n\n  function blockLanguage(block) {\n    var classes = (block.className + ' ' + (block.parentNode ? block.parentNode.className : '')).split(/\\s+/);\n    classes = classes.map(function(c) {return c.replace(/^language-/, '');});\n    for (var i = 0; i < classes.length; i++) {\n      if (languages[classes[i]] || classes[i] == 'no-highlight') {\n        return classes[i];\n      }\n    }\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType == 3)\n          offset += child.nodeValue.length;\n        else if (child.nodeName.toUpperCase() == 'BR')\n          offset += 1;\n        else if (child.nodeType == 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset);\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: child\n          });\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n      if (original[0].offset != highlighted[0].offset) {\n        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n      }\n\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n\n      if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n\n      ... which is collapsed to:\n      */\n      return highlighted[0].event == 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value) + '\"';}\n      result += '<' + node.nodeName.toLowerCase() + Array.prototype.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + node.nodeName.toLowerCase() + '>';\n    }\n\n    function render(event) {\n      (event.event == 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substr(processed, stream[0].offset - processed));\n      processed = stream[0].offset;\n      if (stream == original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream == original && stream.length && stream[0].offset == processed);\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event == 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n    return result + escape(value.substr(processed));\n  }\n\n  /* Initialization */\n\n  function compileLanguage(language) {\n\n    function reStr(re) {\n        return (re && re.source) || re;\n    }\n\n    function langRe(value, global) {\n      return RegExp(\n        reStr(value),\n        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n      );\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled)\n        return;\n      mode.compiled = true;\n\n      var keywords = []; // used later with beginWithKeyword but filled as a side-effect of keywords compilation\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        function flatten(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n          str.split(' ').forEach(function(kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n            keywords.push(pair[0]);\n          });\n        }\n\n        mode.lexemsRe = langRe(mode.lexems || '\\\\b' + hljs.IDENT_RE + '\\\\b(?!\\\\.)', true);\n        if (typeof mode.keywords == 'string') { // string\n          flatten('keyword', mode.keywords);\n        } else {\n          for (var className in mode.keywords) {\n            if (!mode.keywords.hasOwnProperty(className))\n              continue;\n            flatten(className, mode.keywords[className]);\n          }\n        }\n        mode.keywords = compiled_keywords;\n      }\n      if (parent) {\n        if (mode.beginWithKeyword) {\n          mode.begin = '\\\\b(' + keywords.join('|') + ')\\\\b(?!\\\\.)\\\\s*';\n        }\n        mode.beginRe = langRe(mode.begin ? mode.begin : '\\\\B|\\\\b');\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = '\\\\B|\\\\b';\n        if (mode.end)\n          mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end)\n          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance === undefined)\n        mode.relevance = 1;\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      for (var i = 0; i < mode.contains.length; i++) {\n        if (mode.contains[i] == 'self') {\n          mode.contains[i] = mode;\n        }\n        compileMode(mode.contains[i], mode);\n      }\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators = [];\n      for (var i = 0; i < mode.contains.length; i++) {\n        terminators.push(reStr(mode.contains[i].begin));\n      }\n      if (mode.terminator_end) {\n        terminators.push(reStr(mode.terminator_end));\n      }\n      if (mode.illegal) {\n        terminators.push(reStr(mode.illegal));\n      }\n      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(s) {return null;}};\n    }\n\n    compileMode(language);\n  }\n\n  /*\n  Core highlighting function. Accepts a language name and a string with the\n  code to highlight. Returns an object with the following properties:\n\n  - relevance (int)\n  - keyword_count (int)\n  - value (an HTML string with highlighting markup)\n\n  */\n  function highlight(language_name, value, ignore_illegals, continuation) {\n\n    function subMode(lexem, mode) {\n      for (var i = 0; i < mode.contains.length; i++) {\n        var match = mode.contains[i].beginRe.exec(lexem);\n        if (match && match.index == 0) {\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexem) {\n      if (mode.end && mode.endRe.test(lexem)) {\n        return mode;\n      }\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexem);\n      }\n    }\n\n    function isIllegal(lexem, mode) {\n      return !ignore_illegals && mode.illegal && mode.illegalRe.test(lexem);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function processKeywords() {\n      var buffer = escape(mode_buffer);\n      if (!top.keywords)\n        return buffer;\n      var result = '';\n      var last_index = 0;\n      top.lexemsRe.lastIndex = 0;\n      var match = top.lexemsRe.exec(buffer);\n      while (match) {\n        result += buffer.substr(last_index, match.index - last_index);\n        var keyword_match = keywordMatch(top, match);\n        if (keyword_match) {\n          keyword_count += keyword_match[1];\n          result += '<span class=\"'+ keyword_match[0] +'\">' + match[0] + '</span>';\n        } else {\n          result += match[0];\n        }\n        last_index = top.lexemsRe.lastIndex;\n        match = top.lexemsRe.exec(buffer);\n      }\n      return result + buffer.substr(last_index);\n    }\n\n    function processSubLanguage() {\n      if (top.subLanguage && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n      var continuation = top.subLanguageMode == 'continuous' ? top.top : undefined;\n      var result = top.subLanguage ? highlight(top.subLanguage, mode_buffer, true, continuation) : highlightAuto(mode_buffer);\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        keyword_count += result.keyword_count;\n        relevance += result.relevance;\n      }\n      top.top = result.top;\n      return '<span class=\"' + result.language  + '\">' + result.value + '</span>';\n    }\n\n    function processBuffer() {\n      return top.subLanguage !== undefined ? processSubLanguage() : processKeywords();\n    }\n\n    function startNewMode(mode, lexem) {\n      var markup = mode.className? '<span class=\"' + mode.className + '\">': '';\n      if (mode.returnBegin) {\n        result += markup;\n        mode_buffer = '';\n      } else if (mode.excludeBegin) {\n        result += escape(lexem) + markup;\n        mode_buffer = '';\n      } else {\n        result += markup;\n        mode_buffer = lexem;\n      }\n      top = Object.create(mode, {parent: {value: top}});\n    }\n\n    function processLexem(buffer, lexem) {\n      mode_buffer += buffer;\n      if (lexem === undefined) {\n        result += processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexem, top);\n      if (new_mode) {\n        result += processBuffer();\n        startNewMode(new_mode, lexem);\n        return new_mode.returnBegin ? 0 : lexem.length;\n      }\n\n      var end_mode = endOfMode(top, lexem);\n      if (end_mode) {\n        var origin = top;\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          mode_buffer += lexem;\n        }\n        result += processBuffer();\n        do {\n          if (top.className) {\n            result += '</span>';\n          }\n          relevance += top.relevance;\n          top = top.parent;\n        } while (top != end_mode.parent);\n        if (origin.excludeEnd) {\n          result += escape(lexem);\n        }\n        mode_buffer = '';\n        if (end_mode.starts) {\n          startNewMode(end_mode.starts, '');\n        }\n        return origin.returnEnd ? 0 : lexem.length;\n      }\n\n      if (isIllegal(lexem, top))\n        throw new Error('Illegal lexem \"' + lexem + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\n      /*\n      Parser should not reach this point as all types of lexems should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n      mode_buffer += lexem;\n      return lexem.length || 1;\n    }\n\n    var language = languages[language_name];\n    if (!language) {\n      throw new Error('Unknown language: \"' + language_name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var result = '';\n    for(var current = top; current != language; current = current.parent) {\n      if (current.className) {\n        result = '<span class=\"' + current.className +'\">' + result;\n      }\n    }\n    var mode_buffer = '';\n    var relevance = 0;\n    var keyword_count = 0;\n    try {\n      var match, count, index = 0;\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match)\n          break;\n        count = processLexem(value.substr(index, match.index - index), match[0]);\n        index = match.index + count;\n      }\n      processLexem(value.substr(index));\n      for(var current = top; current.parent; current = current.parent) { // close dangling modes\n        if (current.className) {\n          result += '</span>';\n        }\n      };\n      return {\n        relevance: relevance,\n        keyword_count: keyword_count,\n        value: result,\n        language: language_name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message.indexOf('Illegal') != -1) {\n        return {\n          relevance: 0,\n          keyword_count: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - keyword_count (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n  */\n  function highlightAuto(text) {\n    var result = {\n      keyword_count: 0,\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    for (var key in languages) {\n      if (!languages.hasOwnProperty(key))\n        continue;\n      var current = highlight(key, text, false);\n      current.language = key;\n      if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n        second_best = current;\n      }\n      if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    }\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n    return result;\n  }\n\n  /*\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n  */\n  function fixMarkup(value, tabReplace, useBR) {\n    if (tabReplace) {\n      value = value.replace(/^((<[^>]+>|\\t)+)/gm, function(match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      });\n    }\n    if (useBR) {\n      value = value.replace(/\\n/g, '<br>');\n    }\n    return value;\n  }\n\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n  function highlightBlock(block, tabReplace, useBR) {\n    var text = blockText(block, useBR);\n    var language = blockLanguage(block);\n    if (language == 'no-highlight')\n        return;\n    var result = language ? highlight(language, text, true) : highlightAuto(text);\n    language = result.language;\n    var original = nodeStream(block);\n    if (original.length) {\n      var pre = document.createElementNS('http://www.w3.org/1999/xhtml', 'pre');\n      pre.innerHTML = result.value;\n      result.value = mergeStreams(original, nodeStream(pre), text);\n    }\n    result.value = fixMarkup(result.value, tabReplace, useBR);\n\n    var class_name = block.className;\n    if (!class_name.match('(\\\\s|^)(language-)?' + language + '(\\\\s|$)')) {\n      class_name = class_name ? (class_name + ' ' + language) : language;\n    }\n    block.innerHTML = result.value;\n    block.className = class_name;\n    block.result = {\n      language: language,\n      kw: result.keyword_count,\n      re: result.relevance\n    };\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        kw: result.second_best.keyword_count,\n        re: result.second_best.relevance\n      };\n    }\n  }\n\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n    Array.prototype.map.call(document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'pre'), findCode).\n      filter(Boolean).\n      forEach(function(code){highlightBlock(code, hljs.tabReplace);});\n  }\n\n  /*\n  Attaches highlighting to the page load event.\n  */\n  function initHighlightingOnLoad() {\n    window.addEventListener('DOMContentLoaded', initHighlighting, false);\n    window.addEventListener('load', initHighlighting, false);\n  }\n\n  var languages = {}; // a shortcut to avoid writing \"this.\" everywhere\n\n  /* Interface definition */\n\n  this.LANGUAGES = languages;\n  this.highlight = highlight;\n  this.highlightAuto = highlightAuto;\n  this.fixMarkup = fixMarkup;\n  this.highlightBlock = highlightBlock;\n  this.initHighlighting = initHighlighting;\n  this.initHighlightingOnLoad = initHighlightingOnLoad;\n\n  // Common regexps\n  this.IDENT_RE = '[a-zA-Z][a-zA-Z0-9_]*';\n  this.UNDERSCORE_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*';\n  this.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  this.C_NUMBER_RE = '(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n  this.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n  this.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|\\\\.|-|-=|/|/=|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  this.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n  };\n  this.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.C_LINE_COMMENT_MODE = {\n    className: 'comment',\n    begin: '//', end: '$'\n  };\n  this.C_BLOCK_COMMENT_MODE = {\n    className: 'comment',\n    begin: '/\\\\*', end: '\\\\*/'\n  };\n  this.HASH_COMMENT_MODE = {\n    className: 'comment',\n    begin: '#', end: '$'\n  };\n  this.NUMBER_MODE = {\n    className: 'number',\n    begin: this.NUMBER_RE,\n    relevance: 0\n  };\n  this.C_NUMBER_MODE = {\n    className: 'number',\n    begin: this.C_NUMBER_RE,\n    relevance: 0\n  };\n  this.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: this.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  this.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//, end: /\\/[gim]*/,\n    illegal: /\\n/,\n    contains: [\n      this.BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/, end: /\\]/,\n        relevance: 0,\n        contains: [this.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n\n  // Utility functions\n  this.inherit = function(parent, obj) {\n    var result = {};\n    for (var key in parent)\n      result[key] = parent[key];\n    if (obj)\n      for (var key in obj)\n        result[key] = obj[key];\n    return result;\n  };\n}();\nhljs.LANGUAGES['javascript'] = require('highlight.js/javascript.js')(hljs);\nmodule.exports = hljs;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/frameworks/render-stacktrace.js":"'use strict';\n\nvar hljs = require('./hl.js');\n\nfunction getCode(sources, frame) {\n    var codeArr = sources[frame.filename];\n    if (!codeArr || codeArr.length < frame.line) return '';\n\n    var code = codeArr[frame.line - 1];\n\n    // IE<=8 has no trim :(\n    code = (code.trim && code.trim()) || code;\n    if (!code.length) return '';\n\n    // hljs is pretty bad at guessing the language\n    var ext = frame.filename.slice(-3);\n\n    var highlight_fn = hljs.highlightAuto;\n    if (ext === '.js') {\n        highlight_fn = function(src) {\n            return hljs.highlight('javascript', src)\n        }\n    }\n\n    try {\n        return highlight_fn(code).value;\n    } catch (e) {\n        return code;\n    }\n}\n\nfunction hashByFile(source_map) {\n    var sources = source_map.sources;\n    var sources_by_file = {};\n\n    for (var i = 0; i < sources.length; i++) {\n      sources_by_file[sources[i]] = source_map.sourcesContent[i] && source_map.sourcesContent[i].split('\\n')\n    }\n\n    return sources_by_file;\n}\n\nfunction onTraceClick (ev) {\n    if (ev.preventDefault) ev.preventDefault();\n    if (ev.stopPropagation) ev.stopPropagation();\n\n\n    var tgt = ev.target;\n    if (tgt.className !== 'trace') return;\n\n    var input = tgt.parentElement.getElementsByClassName('trace-copy')[0];\n    if (!input) return;\n\n    input.style.display = 'inline';\n    input.style.width = tgt.offsetWidth + 'px';\n    input.focus();\n    input.select();\n\n    input.onblur = function () {\n        input.style.display = 'none';\n        tgt.style.display = 'inline';\n    };\n\n    tgt.style.display = 'none';\n}\n\nvar on_click = 'onclick=\"(' + onTraceClick + ').call(this, arguments[0])\"';\n\nmodule.exports = function (mapped, source_map) {\n    var sources_by_file = hashByFile(source_map);\n\n    var str = '<ul class=\"stack-trace\" style=\"list-style-type: none;\"' + '\" ' + on_click + '>'\n\n    for (var i = 0; i < mapped.length; ++i) {\n        var frame = mapped[i];\n        var code = getCode(sources_by_file, frame);\n\n        // show code for first stacktrace automatically\n        var display = i && code.length ? 'none' : 'block';\n        var anchor_style = code.length ? '' : 'style=\"cursor: default; text-decoration: none;\"';\n\n        str +=  '<li>';\n        str +=      '<span>';\n        str +=          'at ' + frame.func + ' (';\n        str +=          '<input class=\"trace-copy\" spellcheck=\"false\" type=\"text\" value=\"' + frame.filename + ':' + frame.line + '\">';\n        str +=          '<span class=\"trace\">' + frame.filename + ':' + frame.line + '</span>';\n        str +=          ':' + (frame.column || 0) + ')';\n        str +=      '</span>';\n        if (code.length) {\n            str += '<div class=\"hljs\" style=\"display: ' + display + ';\">' + code + '</div>'\n        }\n        str +=   '</li>';\n    }\n\n    str += '</ul>';\n    return str;\n};\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/frameworks/zuul.js":"'use strict';\n\n// TODO(shtylman)\n// we can do something good with this\n// cause we have the mappings file\n// we can actually show where in the source this is!!\n// before we boot anything we should install this to get reasonable debugging\nwindow.onerror = function(msg, file, line) {\n    //var item = document.createTextNode(msg + ':' + file + ':' + line);\n    //document.body.appendChild(item);\n}\n\nglobal.JSON = global.JSON || require('JSON2');\n\nvar load = require('load-script');\nvar stacktrace = require('stacktrace-js');\nvar ajax = require('superagent');\nvar render_stacktrace = require('./render-stacktrace');\n\ntry {\n    var stack_mapper = require('stack-mapper');\n} catch (err) {}\n\n// post messages here to send back to clients\nvar zuul_msg_bus = window.zuul_msg_bus = [];\n\n// shim console.log so we can report back to user\nif (typeof console === 'undefined') {\n  console = {};\n}\n\nvar originalLog = console.log;\nconsole.log = function (msg) {\n    var args = [].slice.call(arguments);\n\n    zuul_msg_bus.push({\n        type: 'console',\n        args: args\n    });\n\n    if (typeof originalLog === 'function') {\n        return originalLog.apply(this, arguments);\n    }\n    // old ghetto ass IE doesn't report typeof correctly\n    // so we just have to call log\n    else if (originalLog) {\n      return originalLog(arguments[0]);\n    }\n};\n\nvar ZuulReporter = function(run_fn) {\n    if (!(this instanceof ZuulReporter)) {\n        return new ZuulReporter(run_fn);\n    }\n\n    var self = this;\n    self.run_fn = run_fn;\n    self.stats = {\n        passed: 0,\n        pending: 0,\n        failed: 0\n    };\n\n    var main_div = document.getElementById('zuul');\n\n    var header = self.header = document.createElement('div');\n    header.className = 'heading pending';\n    /*global zuul */\n    header.innerHTML = zuul.title;\n    main_div.appendChild(header);\n\n    self.status = header.appendChild(document.createElement('div'));\n    self.status.className = 'status';\n\n    self._set_status(self.stats);\n\n    var sub = document.createElement('div');\n    sub.className = 'sub-heading';\n    sub.innerHTML = navigator.userAgent;\n    main_div.appendChild(sub);\n\n    // Add tab selector\n    var tab_selector = document.createElement('div');\n    tab_selector.id = 'tab-selector';\n    var results_selector = document.createElement('a');\n    results_selector.className = 'selected';\n    results_selector.href = '/__zuul';\n    results_selector.innerHTML = 'Test results';\n    results_selector.onclick = function(e) {\n      var selectors = document.querySelectorAll('#tab-selector a');\n      for (var i = 0; i < selectors.length; i++) {\n        selectors[i].className = ''\n      }\n\n      e.target.className = 'selected';\n\n      document.getElementById('test-results-tab').className = 'tab';\n      document.getElementById('code-coverage-tab').className = 'tab hidden';\n      e.preventDefault();\n    };\n    tab_selector.appendChild(results_selector);\n    var coverage_selector = document.createElement('a');\n    coverage_selector.href = '/__zuul/coverage';\n    coverage_selector.innerHTML = 'Code coverage';\n    coverage_selector.onclick = function(e) {\n      var selectors = document.querySelectorAll('#tab-selector a');\n      for (var i = 0; i < selectors.length; i++) {\n        selectors[i].className = ''\n      }\n\n      e.target.className = 'selected';\n\n      document.getElementById('test-results-tab').className = 'tab hidden';\n      document.getElementById('code-coverage-tab').className = 'tab';\n      e.preventDefault();\n    };\n    tab_selector.appendChild(coverage_selector);\n    main_div.appendChild(tab_selector);\n\n    // Add tabs and their content containers\n    var tabs = document.createElement('div');\n    tabs.className = 'tabs';\n    var test_results_tab = document.createElement('div');\n    test_results_tab.className = 'tab';\n    test_results_tab.id = 'test-results-tab';\n    tabs.appendChild(test_results_tab);\n    var code_coverage_tab = document.createElement('div');\n    code_coverage_tab.className = 'tab hidden';\n    code_coverage_tab.id = 'code-coverage-tab';\n    tabs.appendChild(code_coverage_tab);\n    main_div.appendChild(tabs);\n\n    // status info\n    var status = document.createElement('div');\n\n    document.body.appendChild(main_div);\n    self._current_container = test_results_tab;\n\n    self._mapper = undefined;\n\n    // load test bundle and trigger tests to start\n    // this is a problem for auto starting tests like tape\n    // we need map file first\n    // load map file first then test bundle\n    load('/__zuul/test-bundle.js', load_map);\n\n    function load_map(err) {\n        if (err) {\n            self.done(err);\n        }\n\n        if (!stack_mapper) {\n            return self.start();\n        }\n\n        var map_path = '/__zuul/test-bundle.map.json';\n        ajax.get(map_path).end(function(err, res) {\n            if (err) {\n                // ignore map load error\n                return self.start();\n            }\n\n            self._source_map = res.body;\n            try {\n                self._mapper = stack_mapper(res.body);\n            } catch (err) {}\n\n            self.start();\n        });\n    }\n};\n\nZuulReporter.prototype._set_status = function(info) {\n    var self = this;\n    var html = '';\n    html += '<span>' + info.failed + ' <small>failing</small></span> ';\n    html += '<span>' + info.passed + ' <small>passing</small></span> ';\n    if(self.stats.pending){\n        html += '<span>' + info.pending + ' <small>pending</small></span>';\n    }\n\n    self.status.innerHTML = html;\n};\n\n// tests are starting\nZuulReporter.prototype.start = function() {\n    var self = this;\n    self.run_fn();\n};\n\n// all tests done\nZuulReporter.prototype.done = function(err) {\n    var self = this;\n\n    var stats = self.stats;\n    var passed = stats.failed === 0 && stats.passed > 0;\n\n    if (passed) {\n        self.header.className += ' passed';\n    }\n    else {\n        self.header.className += ' failed';\n    }\n\n    // add coverage tab content\n    if (window.__coverage__) {\n        var coverage_tab = document.getElementById('code-coverage-tab');\n        coverage_tab.innerHTML = '<iframe frameborder=\"0\" src=\"/__zuul/coverage\"></iframe>';\n    }\n\n    post_message({\n        type: 'done',\n        stats: stats,\n        passed: passed\n    });\n};\n\n// new test starting\nZuulReporter.prototype.test = function(test) {\n    var self = this;\n\n    var container = document.createElement('div');\n    container.className = 'test pending';\n\n    var header = container.appendChild(document.createElement('h1'));\n    header.innerHTML = test.name;\n\n    self._current_container = self._current_container.appendChild(container);\n\n    post_message({\n        type: 'test',\n        name: test.name\n    });\n};\n\n// reports on skipped tests\nZuulReporter.prototype.skippedTest = function(test){\n    var self = this;\n\n    self.stats.pending++;\n\n    var container = document.createElement('div');\n    container.className = 'test pending skipped';\n\n    var header = container.appendChild(document.createElement('h1'));\n    header.innerHTML = test.name;\n\n    self._current_container.appendChild(container);\n\n    self._set_status(self.stats);\n\n    post_message({\n        type: 'test',\n        name: test.name\n    });\n};\n\n// test ended\nZuulReporter.prototype.test_end = function(test) {\n    var self = this;\n    var name = test.name;\n\n    var cls = test.passed ? 'passed' : 'failed';\n\n    if (test.passed) {\n        self.stats.passed++;\n    }\n    else {\n        self.stats.failed++;\n    }\n\n    // current test element\n    self._current_container.className += ' ' + cls;\n    // use parentNode for legacy browsers (firefox)\n    self._current_container = self._current_container.parentNode;\n\n    self._set_status(self.stats);\n\n    var cov = window.__coverage__ ;\n\n    if (cov) {\n        ajax.post('/__zuul/coverage/client')\n        .send(cov)\n        .end(function(err, res) {\n            if (err) {\n                console.log('error in coverage reports');\n                console.log(err);\n            }\n        });\n    }\n\n    post_message({\n        type: 'test_end',\n        name: test.name,\n        passed: test.passed\n    });\n};\n\n// new suite starting\nZuulReporter.prototype.suite = function(suite) {\n    var self = this;\n};\n\n// suite ended\nZuulReporter.prototype.suite_end = function(suite) {\n    var self = this;\n};\n\n// assertion within test\nZuulReporter.prototype.assertion = function(details) {\n    var self = this;\n    // result (true | false)\n    // actual\n    // expected\n    // message\n    // error\n    // source (stack) if available\n\n    var passed = details.result;\n\n    if (passed) {\n        return;\n    }\n\n    if (details.message) {\n        var pre = document.createElement('pre');\n        pre.innerHTML = details.message;\n        self._current_container.appendChild(pre);\n    }\n\n    // TODO actual, expected\n\n    var message = details.message;\n    var error = details.error;\n    var stack = details.source;\n\n    if (!stack && error) {\n        // rethrow to try and get the stack\n        // IE needs this (of course)\n        try {\n            throw error;\n        } catch (ex) {\n            error = ex;\n            stack = error.stack;\n        }\n    }\n\n    var frames = [];\n    try {\n        frames = stacktrace(error);\n    } catch (err) {}\n\n    self._renderError(stack, frames, message, error);\n\n    post_message({\n        type: 'assertion',\n        actual: details.actual,\n        expected: details.expected,\n        message: details.message,\n        source: details.source,\n        frames: frames\n    });\n};\n\nZuulReporter.prototype._renderError = function (stack, frames, message, error) {\n    var self = this;\n    var mapper = self._mapper;\n    var str;\n\n    if (mapper && frames.length) {\n        var mapped = mapper.map(frames);\n        str = render_stacktrace(mapped, self._source_map);\n    }\n\n    var div = document.createElement('div');\n    div.innerHTML = str ? str : (stack || message || error.toString());\n    self._current_container.appendChild(div);\n};\n\nfunction plainString (mapped) {\n    var str = '';\n    for (var i = 0; i <mapped.length; ++i) {\n        var frame = mapped[i];\n        str += '\\n\\tat ';\n        str += frame.func + ' (' + frame.filename + ':' + frame.line + ':';\n        str += (frame.column || 0) + ')';\n    }\n}\n\nfunction post_message(msg) {\n    zuul_msg_bus.push(msg);\n}\n\nmodule.exports = ZuulReporter;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/builder-browserify.js":"'use strict';\n\nvar _ = require('lodash');\nvar watchify = require('watchify');\nvar browserify = require('browserify');\nvar istanbul = require('browserify-istanbul');\nvar convert = require('convert-source-map');\nvar debug = require('debug')('zuul:browserify');\nvar humanizeDuration = require('humanize-duration');\n\nfunction configure(bundler, cfg) {\n    if (!cfg) {\n        return;\n    }\n\n    var registerableCfg = [\n        'plugin',\n        'external',\n        'ignore',\n        'exclude',\n        'transform',\n        'add',\n        'require'\n    ];\n\n    cfg.forEach(registerable);\n\n    // grab registerable configs and register them\n    function registerable (cfgObj) {\n        _.forIn(cfgObj, function(value, key) {\n            if (registerableCfg.indexOf(key) !== -1) {\n                register(key, cfgObj);\n            }\n        });\n    }\n\n    function register (type, o) {\n        debug('registering %s: %s', type, o[type]);\n        if (type === 'transform' && typeof o[type] === 'object') {\n            bundler[type](o[type].name, _.omit(o[type], 'name'));\n        } else {\n            bundler[type](o[type], _.omit(o, type));\n        }\n    }\n}\n\n// the builder API is var build = require('builder')(files, config); build(cb)\n// So that we can have multiple different `watchifyBundler` caches per build instance.\nmodule.exports = function(files, config) {\n    var watchifyBundler = initBundler(files, config);\n\n    return function(cb) {\n        var start = Date.now();\n        watchifyBundler.bundle(function(err, buf) {\n            if (err) {\n                return cb(err);\n            }\n\n            var src = buf.toString();\n            var srcmap = convert.fromSource(src);\n            var map = undefined;\n            src = convert.removeComments(src);\n\n            if (srcmap) {\n                map = srcmap.toObject();\n            }\n\n            debug('test files took %s to bundle', humanizeDuration(Date.now() - start));\n            cb(null, src, map);\n        });\n    };\n};\n\nfunction initBundler(files, config) {\n    var opt = {\n        debug: true,\n        basedir: config.prj_dir\n    };\n\n    // watchify options\n    // https://github.com/substack/watchify#var-w--watchifyb-opts\n    opt = _.assign(opt, {\n        cache: {},\n        packageCache: {},\n        fullPaths: true\n    });\n\n    var userConfig = _.find(config.browserify, 'options');\n    var browserifyOptions = _.assign({}, opt);\n\n    if (userConfig) {\n        browserifyOptions = _.assign(browserifyOptions, userConfig.options || {});\n    }\n\n    var bundler = browserify(browserifyOptions);\n\n    debug('configuring browserify with provided options: %j', config.browserify);\n    configure(bundler, config.browserify);\n\n    if (config.coverage && config.local) {\n        debug('using istanbul transform');\n        bundler.transform(istanbul({\n            defaultIgnore: true\n        }));\n    }\n\n    debug('adding to bundle: %j', files);\n    files.forEach(function(file) {\n        bundler.require(file, { entry: true });\n    });\n\n    bundler = watchify(bundler);\n\n    return bundler;\n}\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/electron-inject.js":"!function() {\n    var ipc;\n    try {\n      ipc = require('electron').ipcRenderer;\n    } catch (e) {\n      ipc = require('ipc');\n    }\n    window.zuul_msg_bus = [];\n    ipc.on('started', loop);\n    window.setTimeout(ipc.send.bind(ipc, 'started'));\n    function loop() {\n        var msgs = window.zuul_msg_bus.splice(0, window.zuul_msg_bus.length);\n        msgs.forEach(send);\n        setTimeout(loop, 100);\n    }\n    function send(msg) {\n        ipc.send('zuulmessage', msg);\n    }\n}();\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/electron-run.js":"var electron;\n\ntry {\n  electron = require('electron');\n} catch (e) {\n  electron = {\n      app: require('app'),\n      ipcMain: require('ipc'),\n      BrowserWindow: require('browser-window')\n  };\n}\n\nvar url = process.argv[2];\n\nelectron.app.on('ready', function () {\n    var options = {\n      show: false,\n      webPreferences: {\n        preload: __dirname + '/electron-inject.js'\n      }\n    };\n    options.preload = options.webPreferences.preload;\n    var mainWindow = new electron.BrowserWindow(options);\n\n    (mainWindow.loadURL || mainWindow.loadUrl).call(mainWindow, url);\n\n    electron.ipcMain.once('started', function () {\n        mainWindow.send('started');\n    });\n\n    electron.ipcMain.on('zuulmessage', function(e, msg) {\n        console.log(JSON.stringify(msg));\n        if (msg.type === 'done') {\n          electron.app.quit();\n        }\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/flatten_browser.js":"var xtend = require('xtend');\nvar uniq = require('lodash').uniq;\n\n// given a list of browsers we want to test\n// expand into an actual testable list of browsers\n// @param {Array} request array of { name: 'chrome', version: <version str>, platform: <os> }\n// @param {Object} supported browsers and versions\n// @return {Array} browsers to test { name: <browser name>, version: <version>, platform: <os> }\nfunction flatten(request, all_browsers) {\n    var browsers = [];\n\n    // turn each browser request into an array of valid browsers\n    request.forEach(function(req) {\n        if (!all_browsers[req.name]) {\n            return;\n        }\n        // clone because we will modify to filter down\n        var avail = all_browsers[req.name].slice(0);\n\n        if (req.platform && typeof req.platform === 'string') {\n            avail = avail.filter(function(browser) {\n                return req.platform.toLowerCase() === browser.platform.toLowerCase();\n            });\n        }\n        else if (req.platform && Array.isArray(req.platform)) {\n            req.platform = req.platform.map(function(platform) {\n                return platform.toLowerCase();\n            });\n\n            avail = avail.filter(function(browser) {\n                return req.platform.indexOf(browser.platform.toLowerCase()) > -1;\n            });\n        }\n\n        if (avail.length === 0) {\n            return;\n        }\n\n        // sort version entries putting 'beta' last\n        avail = avail.sort(function(a, b) {\n            if (a.version === b.version) {\n                return 0;\n            }\n            else if (Number.isNaN(Number(a.version))) {\n                return 1;\n            }\n            else if (Number.isNaN(Number(b.version))) {\n                return -1;\n            }\n            return a.version - b.version;\n        });\n\n        // remove duplicate version entries\n        // because we are not interested in testing on all platforms\n        // unless explicitly asked\n        if (!req.platform) {\n            avail.reduce(function(prev, curr, idx, arr) {\n                if (prev && prev.version === curr.version) {\n                    arr[idx] = undefined;\n                }\n                return curr;\n            });\n        }\n\n        avail = avail.filter(Boolean);\n\n        // version is an array, we should add each item from array\n        if (Array.isArray(req.version)) {\n            return req.version.forEach(function(version) {\n                browsers.push.apply(browsers, process_version_str(version));\n                return;\n            });\n        }\n\n        browsers.push.apply(browsers, process_version_str(req.version));\n        return;\n\n        // return an array of browsers to match version string\n        // version string can be a single version\n        // or a range ##..##\n        // or ##..latest\n        function process_version_str(version) {\n            version = String(version);\n            if (version === 'latest') {\n                if (Array.isArray(req.platform)) {\n                    var latest = get_numeric_versions(avail).slice(-1)[0].version;\n                    return avail.filter(function(browser) {\n                        return browser.version === latest;\n                    });\n                }\n                else {\n                    return get_numeric_versions(avail).slice(-1).map(addProfile);\n                }\n            }\n            else if (version === 'oldest') {\n                if (Array.isArray(req.platform)) {\n                    var oldest = get_numeric_versions(avail).slice(0, 1)[0].version;\n                    return avail.filter(function(browser) {\n                        return browser.version === oldest;\n                    });\n                }\n                else {\n                    return avail.slice(0, 1).map(addProfile);\n                }\n            }\n\n            // split version string on two dots to see if range was specified\n            var split = version.split('..');\n\n            // range specified via ##..##\n            if (split.length === 2) {\n                var start = split[0];\n                var end = split[1];\n\n                var start_idx = 0;\n                var end_idx = avail.length - 1;\n\n                var v_map = avail.map(function(item) {\n                    return item.version;\n                });\n\n                if (end === 'latest') {\n                    end_idx = get_numeric_versions(avail).length - 1;\n                }\n                else {\n                    end_idx = v_map.lastIndexOf(end);\n                }\n\n                if (start < 0) {\n                    start_idx = end_idx + Number(start);\n                }\n                else if (start !== 'oldest') {\n                    start_idx = v_map.indexOf(start);\n                }\n\n                if (start_idx < 0) {\n                    throw new Error('unable to find start version: ' + start);\n                }\n                else if (end_idx < 0) {\n                    throw new Error('unable to find end version: ' + end);\n                }\n\n                return avail.slice(start_idx, end_idx + 1).map(addProfile);\n            }\n\n            return avail.filter(function(browser) {\n                // JS will forget about the .0 when reading any float that can\n                // be represented as an integer from yaml, so let's try to\n                // match a version of that form as a fallback\n                return browser.version == version || browser.version == version + '.0';\n            }).map(addProfile);\n\n            function get_numeric_versions(browsers) {\n                return browsers.filter(function (el) {\n                    return Number(el.version) >= 0;\n                })\n            }\n\n            function addProfile(browser) {\n                if (req.firefox_profile) {\n                    return xtend(browser, {\n                        firefox_profile: req.firefox_profile\n                    });\n                }\n\n                return browser;\n            }\n        }\n    });\n\n    return uniq(browsers);\n}\n\nmodule.exports = flatten;\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/phantom-run.js":"// THIS IS A PHANTOMJS SCRIPT FILE //\n// see PhantomBrowser.js for use //\n\nvar page = require('webpage').create();\nvar system = require('system');\n\nvar url = system.args[1];\nvar systemMessages = [];\n\nphantom.onError = function(msg, trace) {\n    systemMessages.push({\n        type: 'exception',\n        message: msg,\n        trace: trace\n    });\n};\n\npage.onError = function(msg, trace) {\n    systemMessages.push({\n        type: 'exception',\n        message: msg,\n        trace: trace\n    });\n};\n\npage.open(url, function(status) {\n    var msg_tid = setInterval(function() {\n        var msgs = page.evaluate(function() {\n            return window.zuul_msg_bus && window.zuul_msg_bus.splice(0, window.zuul_msg_bus.length);\n        }) || [];\n\n        var messages = msgs.concat(systemMessages.splice(0, systemMessages.length));\n\n        messages.forEach(function(msg) {\n            console.log(JSON.stringify(msg));\n            if (msg.type === 'exception') {\n                console.error(msg.message);\n                console.trace(msg.trace);\n                return setTimeout(function() {\n                    phantom.exit(1);\n                });\n            }\n            if (msg.type === 'done') {\n                return setTimeout(function() {\n                  phantom.exit(msg.passed ? 0 : 1);\n                });\n            }\n        });\n    }, 100);\n});\n","/home/travis/build/npmtest/node-npmtest-zuul/node_modules/zuul/lib/scout_browser.js":"// returns available browsers to test on\n// results are keyed by browser\n// each browser has an array of objects with version and platform info\n// some versions may have more than one OS they can run on\n// {\n//     'chrome': [\n//        { version: 27, platform: 'Windows XP' }\n//        { version: 27, platform: 'Mac 10.6' }\n//     ]\n// }\n\nvar https = require('https');\n\nmodule.exports = function(cb) {\n    var info_opt = {\n        host: 'saucelabs.com',\n        path: '/rest/v1/info/browsers/webdriver'\n    };\n\n    https.get(info_opt, function(res) {\n        res.setEncoding('utf8');\n        var body = '';\n\n        res.on('data', function(data) {\n            body += data;\n        });\n\n        res.once('end', function() {\n            try {\n                var formatted = format(JSON.parse(body));\n            } catch (err) {\n                return cb(err);\n            }\n\n            cb(null, formatted);\n        });\n\n        res.once('error', cb);\n    });\n};\n\nfunction format(obj) {\n    var browsers = {};\n    obj.forEach(function(info) {\n        var name = info.api_name;\n\n        var browser = browsers[name] = browsers[name] || [];\n        browser.push({\n            name: name,\n            version: info.short_version,\n            platform: info.os,\n        });\n    });\n\n    return browsers;\n}\n"}